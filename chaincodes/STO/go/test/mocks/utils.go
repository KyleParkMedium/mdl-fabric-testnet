// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

type Utils struct {
	GetIDStub        func(contractapi.TransactionContextInterface) (string, error)
	getIDMutex       sync.RWMutex
	getIDArgsForCall []struct {
		arg1 contractapi.TransactionContextInterface
	}
	getIDReturns struct {
		result1 string
		result2 error
	}
	getIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetMSPIDStub        func(contractapi.TransactionContextInterface) error
	getMSPIDMutex       sync.RWMutex
	getMSPIDArgsForCall []struct {
		arg1 contractapi.TransactionContextInterface
	}
	getMSPIDReturns struct {
		result1 error
	}
	getMSPIDReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Utils) GetID(arg1 contractapi.TransactionContextInterface) (string, error) {
	fake.getIDMutex.Lock()
	ret, specificReturn := fake.getIDReturnsOnCall[len(fake.getIDArgsForCall)]
	fake.getIDArgsForCall = append(fake.getIDArgsForCall, struct {
		arg1 contractapi.TransactionContextInterface
	}{arg1})
	stub := fake.GetIDStub
	fakeReturns := fake.getIDReturns
	fake.recordInvocation("GetID", []interface{}{arg1})
	fake.getIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Utils) GetIDCallCount() int {
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	return len(fake.getIDArgsForCall)
}

func (fake *Utils) GetIDCalls(stub func(contractapi.TransactionContextInterface) (string, error)) {
	fake.getIDMutex.Lock()
	defer fake.getIDMutex.Unlock()
	fake.GetIDStub = stub
}

func (fake *Utils) GetIDArgsForCall(i int) contractapi.TransactionContextInterface {
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	argsForCall := fake.getIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Utils) GetIDReturns(result1 string, result2 error) {
	fake.getIDMutex.Lock()
	defer fake.getIDMutex.Unlock()
	fake.GetIDStub = nil
	fake.getIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Utils) GetIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.getIDMutex.Lock()
	defer fake.getIDMutex.Unlock()
	fake.GetIDStub = nil
	if fake.getIDReturnsOnCall == nil {
		fake.getIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Utils) GetMSPID(arg1 contractapi.TransactionContextInterface) error {
	fake.getMSPIDMutex.Lock()
	ret, specificReturn := fake.getMSPIDReturnsOnCall[len(fake.getMSPIDArgsForCall)]
	fake.getMSPIDArgsForCall = append(fake.getMSPIDArgsForCall, struct {
		arg1 contractapi.TransactionContextInterface
	}{arg1})
	stub := fake.GetMSPIDStub
	fakeReturns := fake.getMSPIDReturns
	fake.recordInvocation("GetMSPID", []interface{}{arg1})
	fake.getMSPIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Utils) GetMSPIDCallCount() int {
	fake.getMSPIDMutex.RLock()
	defer fake.getMSPIDMutex.RUnlock()
	return len(fake.getMSPIDArgsForCall)
}

func (fake *Utils) GetMSPIDCalls(stub func(contractapi.TransactionContextInterface) error) {
	fake.getMSPIDMutex.Lock()
	defer fake.getMSPIDMutex.Unlock()
	fake.GetMSPIDStub = stub
}

func (fake *Utils) GetMSPIDArgsForCall(i int) contractapi.TransactionContextInterface {
	fake.getMSPIDMutex.RLock()
	defer fake.getMSPIDMutex.RUnlock()
	argsForCall := fake.getMSPIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Utils) GetMSPIDReturns(result1 error) {
	fake.getMSPIDMutex.Lock()
	defer fake.getMSPIDMutex.Unlock()
	fake.GetMSPIDStub = nil
	fake.getMSPIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *Utils) GetMSPIDReturnsOnCall(i int, result1 error) {
	fake.getMSPIDMutex.Lock()
	defer fake.getMSPIDMutex.Unlock()
	fake.GetMSPIDStub = nil
	if fake.getMSPIDReturnsOnCall == nil {
		fake.getMSPIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getMSPIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Utils) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getIDMutex.RLock()
	defer fake.getIDMutex.RUnlock()
	fake.getMSPIDMutex.RLock()
	defer fake.getMSPIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Utils) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
