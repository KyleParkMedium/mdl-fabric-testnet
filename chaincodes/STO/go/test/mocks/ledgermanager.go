// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

type Ledger struct {
	GetStateStub        func(string, string, contractapi.TransactionContextInterface) ([]byte, error)
	getStateMutex       sync.RWMutex
	getStateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 contractapi.TransactionContextInterface
	}
	getStateReturns struct {
		result1 []byte
		result2 error
	}
	getStateReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	PutStateStub        func(string, string, interface{}, contractapi.TransactionContextInterface) (string, error)
	putStateMutex       sync.RWMutex
	putStateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 contractapi.TransactionContextInterface
	}
	putStateReturns struct {
		result1 string
		result2 error
	}
	putStateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UpdateStateStub        func(string, string, map[string]interface{}, contractapi.TransactionContextInterface) error
	updateStateMutex       sync.RWMutex
	updateStateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
		arg4 contractapi.TransactionContextInterface
	}
	updateStateReturns struct {
		result1 error
	}
	updateStateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Ledger) GetState(arg1 string, arg2 string, arg3 contractapi.TransactionContextInterface) ([]byte, error) {
	fake.getStateMutex.Lock()
	ret, specificReturn := fake.getStateReturnsOnCall[len(fake.getStateArgsForCall)]
	fake.getStateArgsForCall = append(fake.getStateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 contractapi.TransactionContextInterface
	}{arg1, arg2, arg3})
	stub := fake.GetStateStub
	fakeReturns := fake.getStateReturns
	fake.recordInvocation("GetState", []interface{}{arg1, arg2, arg3})
	fake.getStateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Ledger) GetStateCallCount() int {
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	return len(fake.getStateArgsForCall)
}

func (fake *Ledger) GetStateCalls(stub func(string, string, contractapi.TransactionContextInterface) ([]byte, error)) {
	fake.getStateMutex.Lock()
	defer fake.getStateMutex.Unlock()
	fake.GetStateStub = stub
}

func (fake *Ledger) GetStateArgsForCall(i int) (string, string, contractapi.TransactionContextInterface) {
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	argsForCall := fake.getStateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Ledger) GetStateReturns(result1 []byte, result2 error) {
	fake.getStateMutex.Lock()
	defer fake.getStateMutex.Unlock()
	fake.GetStateStub = nil
	fake.getStateReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Ledger) GetStateReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getStateMutex.Lock()
	defer fake.getStateMutex.Unlock()
	fake.GetStateStub = nil
	if fake.getStateReturnsOnCall == nil {
		fake.getStateReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getStateReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Ledger) PutState(arg1 string, arg2 string, arg3 interface{}, arg4 contractapi.TransactionContextInterface) (string, error) {
	fake.putStateMutex.Lock()
	ret, specificReturn := fake.putStateReturnsOnCall[len(fake.putStateArgsForCall)]
	fake.putStateArgsForCall = append(fake.putStateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 interface{}
		arg4 contractapi.TransactionContextInterface
	}{arg1, arg2, arg3, arg4})
	stub := fake.PutStateStub
	fakeReturns := fake.putStateReturns
	fake.recordInvocation("PutState", []interface{}{arg1, arg2, arg3, arg4})
	fake.putStateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Ledger) PutStateCallCount() int {
	fake.putStateMutex.RLock()
	defer fake.putStateMutex.RUnlock()
	return len(fake.putStateArgsForCall)
}

func (fake *Ledger) PutStateCalls(stub func(string, string, interface{}, contractapi.TransactionContextInterface) (string, error)) {
	fake.putStateMutex.Lock()
	defer fake.putStateMutex.Unlock()
	fake.PutStateStub = stub
}

func (fake *Ledger) PutStateArgsForCall(i int) (string, string, interface{}, contractapi.TransactionContextInterface) {
	fake.putStateMutex.RLock()
	defer fake.putStateMutex.RUnlock()
	argsForCall := fake.putStateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Ledger) PutStateReturns(result1 string, result2 error) {
	fake.putStateMutex.Lock()
	defer fake.putStateMutex.Unlock()
	fake.PutStateStub = nil
	fake.putStateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Ledger) PutStateReturnsOnCall(i int, result1 string, result2 error) {
	fake.putStateMutex.Lock()
	defer fake.putStateMutex.Unlock()
	fake.PutStateStub = nil
	if fake.putStateReturnsOnCall == nil {
		fake.putStateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.putStateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Ledger) UpdateState(arg1 string, arg2 string, arg3 map[string]interface{}, arg4 contractapi.TransactionContextInterface) error {
	fake.updateStateMutex.Lock()
	ret, specificReturn := fake.updateStateReturnsOnCall[len(fake.updateStateArgsForCall)]
	fake.updateStateArgsForCall = append(fake.updateStateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 map[string]interface{}
		arg4 contractapi.TransactionContextInterface
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateStateStub
	fakeReturns := fake.updateStateReturns
	fake.recordInvocation("UpdateState", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateStateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Ledger) UpdateStateCallCount() int {
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	return len(fake.updateStateArgsForCall)
}

func (fake *Ledger) UpdateStateCalls(stub func(string, string, map[string]interface{}, contractapi.TransactionContextInterface) error) {
	fake.updateStateMutex.Lock()
	defer fake.updateStateMutex.Unlock()
	fake.UpdateStateStub = stub
}

func (fake *Ledger) UpdateStateArgsForCall(i int) (string, string, map[string]interface{}, contractapi.TransactionContextInterface) {
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	argsForCall := fake.updateStateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Ledger) UpdateStateReturns(result1 error) {
	fake.updateStateMutex.Lock()
	defer fake.updateStateMutex.Unlock()
	fake.UpdateStateStub = nil
	fake.updateStateReturns = struct {
		result1 error
	}{result1}
}

func (fake *Ledger) UpdateStateReturnsOnCall(i int, result1 error) {
	fake.updateStateMutex.Lock()
	defer fake.updateStateMutex.Unlock()
	fake.UpdateStateStub = nil
	if fake.updateStateReturnsOnCall == nil {
		fake.updateStateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateStateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Ledger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	fake.putStateMutex.RLock()
	defer fake.putStateMutex.RUnlock()
	fake.updateStateMutex.RLock()
	defer fake.updateStateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Ledger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
